name: Build, Test, SonarQube, Cypress E2E, and Docker Push

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: back-end   # My backend folder

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Cache Maven local repository
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build and run backend tests
        run: mvn clean verify

      - name: Build Docker image for backend (test)
        run: docker build -t backend-test-image:latest .

      - name: Run backend container with H2 test profile
        run: |
          docker run -d -p 8080:8080 --name backend-test-container backend-test-image:latest --spring.profiles.active=test

      - name: Wait for backend container to be healthy
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:8080/actuator/health | grep -q UP; then
              echo "Backend container is healthy!"
              break
            else
              echo "Waiting for backend container to be healthy..."
              sleep 5
            fi
          done
      
      # - name: Prepare zap_reports folder
      #   run: |
      #     mkdir -p zap_reports
      #     chmod 777 zap_reports

      # - name: Run ZAP Baseline Scan
      #   run: |
      #     docker run --network host -v ${{ github.workspace }}/zap_reports:/zap/wrk/:rw -t zaproxy/zap-stable \
      #       zap-baseline.py -t http://localhost:8080 -r zap_report.html
      
      # - name: Upload ZAP report
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: zap-report
      #     path: zap_reports/zap_report.html


      # - name: Run Pushgateway container
      #   run: |
      #     docker run -d --name pushgateway -p 9091:9091 prom/pushgateway
        
      # - name: Wait for Pushgateway to be ready
      #   run: |
      #     for i in {1..10}; do
      #       if curl -s http://localhost:9091/metrics | grep 'pushgateway_build_info'; then
      #         echo "Pushgateway is up!"
      #         break
      #       else
      #         echo "Waiting for Pushgateway..."
      #         sleep 2
      #       fi
      #     done

      # - name: Show Pushgateway container logs before push
      #   run: docker logs pushgateway || echo "No logs found"

      
      # - name: Push and verify CI duration metric to Pushgateway
      #   shell: bash
      #   run: |
      #     set -euo pipefail

      #     PUSHGATEWAY_URL="http://localhost:9091"
      #     JOB_NAME="ci"
      #     INSTANCE_NAME="github-runner"
      #     METRIC_NAME="ci_duration_seconds"
      #     METRIC_VALUE=7.7

      #     echo "Pushing metric ${METRIC_NAME}=${METRIC_VALUE} to Pushgateway..."

      #     echo -e "# TYPE ci_duration_seconds gauge\nci_duration_seconds ${METRIC_VALUE}" | \
      #     curl --fail -v -H "Content-Type: text/plain" --data-binary @- "${PUSHGATEWAY_URL}/metrics/job/${JOB_NAME}/instance/${INSTANCE_NAME}"


      #     echo "Waiting 2 seconds for Pushgateway to register metric..."
      #     sleep 2

      #     echo "Verifying metric visibility in Pushgateway..."

      #     METRIC_FOUND=$(curl --fail -s "${PUSHGATEWAY_URL}/metrics" | grep -w "${METRIC_NAME}" || true)

      #     if [[ -z "$METRIC_FOUND" ]]; then
      #       echo "ERROR: Metric '${METRIC_NAME}' not found in Pushgateway metrics!"
      #       exit 1
      #     else
      #       echo "SUCCESS: Metric '${METRIC_NAME}' found in Pushgateway metrics:"
      #       echo "$METRIC_FOUND"
      #     fi


      # - name: Verify metric after push
      #   run: |
      #     echo "Verifying ci_duration_seconds from Pushgateway after push:"
      #     curl -s http://localhost:9091/metrics | grep ci_duration_seconds || echo "Metric not found"

      # - name: Manual test push and verify
      #   run: |
      #     echo -e "# TYPE test_metric gauge\ntest_metric 42" | \
      #       curl -v --data-binary @- http://localhost:9091/metrics/job/test/instance/test-instance
      #     echo "Metrics after test push:"
      #     curl -s http://localhost:9091/metrics | grep test_metric || echo "Test metric not found"

      # - name: Show Pushgateway container logs after pushes
      #   run: docker logs pushgateway || echo "No logs found"

      # - name: Wait for Prometheus to scrape Pushgateway
      #   run: |
      #     for i in {1..15}; do
      #       if curl -s http://localhost:9090/api/v1/query?query=ci_duration_seconds | grep 'ci_duration_seconds'; then
      #         echo "Prometheus has scraped Pushgateway CI metric!"
      #         break
      #       fi
      #       sleep 2
      #     done

      # # Optional: Run Grafana container (if you want)
      # - name: Run Grafana container
      #   run: |
      #     docker run -d --name grafana -p 3000:3000 grafana/grafana

      - name: Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn sonar:sonar -Dsonar.projectKey=MilanVanSteen_S3-Milan-van-Steen -Dsonar.organization=milanvansteen -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }} -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      - name: Stop and remove backend-test container
        run: |
          docker stop backend-test-container || true
          docker rm backend-test-container || true

      - name: Build Docker image for backend
        run: docker build -t milanvansteen/s3-milan-van-steen-backend:latest .

      - name: Check Docker secrets
        run: |
          echo "Username length: ${{ secrets.DOCKERHUB_USERNAME }}" | wc -c
          echo "Password length: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | wc -c

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push backend image to Docker Hub
        run: docker push milanvansteen/s3-milan-van-steen-backend:latest

  build-frontend:
    runs-on: ubuntu-latest
    needs: build-backend

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: List front-end files
        run: ls -la front-end

      - name: Set up Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci
        working-directory: front-end

      - name: Run unit tests (Vitest)
        run: npm run test -- --coverage
        working-directory: front-end

      - name: Run SonarCloud Scan for Frontend
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectBaseDir: front-end
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONTEND }}

      - name: Run Cypress tests with server start
        uses: cypress-io/github-action@v5
        with:
          start: npm run dev
          wait-on: http://localhost:5173
          wait-on-timeout: 60
          working-directory: front-end
        env:
          VITE_ENV: ci

      - name: Build Docker image for frontend
        run: docker build -t milanvansteen/s3-milan-van-steen-frontend:latest ./front-end

      - name: Check Docker secrets
        run: |
          echo "Username length: ${{ secrets.DOCKERHUB_USERNAME }}" | wc -c
          echo "Password length: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | wc -c

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push frontend image to Docker Hub
        run: docker push milanvansteen/s3-milan-van-steen-frontend:latest


